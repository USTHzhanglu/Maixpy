# object classifier boot.py
# generated by maixhub.com

import sensor, image, lcd, time
import KPU as kpu
import gc, sys
ssid="1234"
key="11111111"
uid="45df377e15b068b8c2ec930c22a784fb"
topic="K210"
method='POST'
url='http://images.bemfa.com/upload/v1/upimages.php'
data=None
headers={"Content-Type":"image/jpg","Authorization": uid,"Authtopic":topic}
def set_net(baudrate=2048000):
    from setuart import setUART as SU
    from fpioa_manager import fm
    from machine import UART
    import network
    fm.register(7, fm.fpioa.UART1_TX, force=True)
    fm.register(6, fm.fpioa.UART1_RX, force=True)
    SU.setuart(baudrate,1)
    uart = UART(UART.UART1,baudrate, timeout=1, read_buf_len=10240)
    net=network.ESP8285(uart)
    net.disconnect()
    net.connect(ssid, key)
def send_photo(img):
    import urequests
    img = img.compress(40)#压缩图片为jpg，质量为10%
    data=img.to_bytes()
    urequests.request(method=method,url=url,data=data,headers=headers)
def lcd_show_except(e):
    import uio
    err_str = uio.StringIO()
    sys.print_exception(e, err_str)
    err_str = err_str.getvalue()
    img = image.Image(size=(224,224))
    img.draw_string(0, 10, err_str, scale=1, color=(0x00,0xff,0xff))
    lcd.display(img)

def main(labels = None, model_addr="/sd/yolov2.kmodel",lcd_rotation=0, sensor_hmirror=True, sensor_vflip=True):
    sensor.reset()
    sensor.set_pixformat(sensor.RGB565)
    sensor.set_framesize(sensor.QVGA)
    sensor.set_hmirror(sensor_hmirror)
    sensor.set_vflip(sensor_vflip)
    sensor.run(1)

    lcd.init(type=1)
    lcd.rotation(lcd_rotation)
    lcd.clear(lcd.WHITE)
    task = kpu.load(model_addr)
    anchor = (0.64, 0.67, 0.93, 0.97, 0.98, 1.06, 1.07, 1.17, 1.17, 1.3)
    kpu.init_yolo2(task, 0.5, 0.3, 5, anchor)
    if not labels:
        with open('labels.txt','r') as f:
            exec(f.read())
    if not labels:
        print("no labels.txt")
        img = image.Image(size=(320, 240))
        img.draw_string(90, 110, "no labels.txt", color=(255, 0, 0), scale=2)
        lcd.display(img)
        return 1
    try:
        img = image.Image("startup.jpg")
        lcd.display(img)
    except Exception:
        img = image.Image(size=(320, 240))
        img.draw_string(90, 110, "loading model...", color=(255, 255, 255), scale=2)
        lcd.display(img)
    try:
        while True:
            code = None
            img = sensor.snapshot()
            img2=image.Image(copy_to_fb=True)
            img2=img.copy((48,8,224, 224))
            img2.pix_to_ai()
            code = kpu.run_yolo2(task,img2)
            if code!=None:
                max_area = 0
                max_i = 0
                for i, j in enumerate(code):
                    a = j.w()*j.h()
                    if a > max_area:
                        max_i = i
                        max_area = a
                img2 = img2.draw_rectangle(code[max_i].rect())
                send_photo(img)
            lcd.display(img2)
    except Exception as e:
        raise e
    finally:
        if not task is None:
            kpu.deinit(task)


if __name__ == "__main__":
    from Maix import utils
    gc.collect()
    utils.gc_heap_size(0x80000)
    kpu.memtest()
    set_net(2048000)
    try:
        label = ["fire"]
        main(labels=label, model_addr="/sd/yolov2.kmodel")
    except Exception as e:
        sys.print_exception(e)
        lcd_show_except(e)
    finally:
        gc.collect()
